@page "/notifications"
@using PayRemind.Shared
@using static PayRemind.Components.Pages.Home
@inject NotificationServiceBd NotificationServiceBd
@inject SQLiteDatabaseService DatabaseService
@inject SharedStateService StateService
@implements IDisposable
@inject IJSRuntime JS


@namespace PayRemind.Components.Pages



<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />



<h3 class="text-center">Lista de Notificaciones Pagadas</h3>


<div class="rz-p-4">
    @foreach (var item in notifications)
    {
        <div class="swipe-item rz-shadow-1 rz-mb-2">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@item.Name</MudText>
                    <MudText Typo="Typo.body2">@item.DateTime</MudText>
                    <MudText Typo="Typo.body2">Valor: <strong>@item.Amount</strong></MudText>

                    @if (item.IsPaid)
                    {
                        <MudText Typo="Typo.body2">Estado: <strong>Pagado</strong></MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">Estado: <strong>Sin Pagar</strong></MudText>
                    }
                </MudCardContent>
            </MudCard>
        </div>
    }
</div>



@code {

    private AppTheme? currentTheme;

    public AppTheme? CurrentTheme
    {
        get

        {

            if (Application.Current != null)
            {
                return Application.Current.RequestedTheme;
            }

            return null;
        }
        set { currentTheme = Application.Current != null ? Application.Current.RequestedTheme : null; }
    }


    private List<NotificationData> notifications = new();
    private NotificationData selectedNotification = new();
    private bool? checkBoxValue;
    private List<SwipeItemNotification> Items = new List<SwipeItemNotification>();
    private bool _isDarkMode;



    protected override async Task OnInitializedAsync()
    {

        if (currentTheme == AppTheme.Light)
        {
            _isDarkMode = false;
        }
        else
        {
            _isDarkMode = true;
        }

        
        await ReloadData();
        StateService.OnChange += StateHasChangedData;
    }

    async Task ReloadData()
    {
        notifications = await DatabaseService.GetNotificationsAsync(true);
    }

    async Task StateHasChangedData()
    {
        await ReloadData();
        StateHasChanged();
    }


    public void Dispose()
    {
        StateService.OnChange -= StateHasChangedData;
    }
}

