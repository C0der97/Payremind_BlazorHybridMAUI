@page "/notifications"
@using PayRemind.Shared
@using static PayRemind.Components.Pages.Home
@inject NotificationServiceBd NotificationServiceBd
@inject DialogService DialogService
@inject SQLiteDatabaseService DatabaseService



<h3>Lista de Notificaciones Programadas</h3>

<RadzenDataList WrapItems="true" AllowPaging="true" Data="@notifications" TItem="NotificationData">
    <Template Context="notification">
        <div style="color: black">
            <strong>Nombre:</strong> @notification.Name<br />
            <strong>Monto:</strong> @notification.Amount<br />
            <strong>Fecha y Hora:</strong> @notification.DateTime<br />
            <button @onclick="@(args => OnChange(notification))" type="button" class="custom-success-button rz-ripple">Marcar como pagado</button>
        </div>
    </Template>
</RadzenDataList>

@code {
    private List<NotificationData> notifications = new();
    private NotificationData selectedNotification = new ();
    private bool? checkBoxValue;

    protected override void OnInitialized()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        notifications = await DatabaseService.GetNotificationsAsync();
    }

    async Task<bool> OnChange(NotificationData notification)
    {
            notification.IsPaid = true;
            selectedNotification = notification;
            // var result = await DialogService.OpenAsync<ConfirmDialog>("Confirmación", new Dictionary<string, object> {
            //     { "Notification", notification } 
            // });

            bool answer = await Application.Current.MainPage.DisplayAlert("Confirmación", "¿Estás seguro que deseas realizar esta acción?", "Sí", "No");

            if (answer == true)
            {
                // Si el usuario confirma, programamos una nueva notificación para el próximo mes
                var newNotification = new NotificationData
                    {
                        Name = notification.Name,
                        Amount = notification.Amount,
                        DateTime = notification.DateTime.AddDays(30),
                        IsPaid = false
                    };
                NotificationServiceBd.AddNotification(newNotification);
            }

            return await Task.FromResult(true);
    }
}
