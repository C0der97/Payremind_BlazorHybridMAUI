@page "/"
@inject NotificationServiceBd NotificationServiceBd
@inject NotificationServiceMaui NotificationServiceMaui
@inject SQLiteDatabaseService DatabaseService
@inject IJSRuntime JSRuntime
@inject SharedStateService StateService
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable


@using CommunityToolkit.Mvvm.Messaging
@using MudBlazor
@using PayRemind.Messages
@using PayRemind.Shared
@using Plugin.LocalNotification
@using Microsoft.Extensions.DependencyInjection


<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider Position="DialogPosition.Center" BackdropClick="false" />
<MudSnackbarProvider />

<style>
    .swipe-item {
        position: relative;
        overflow: hidden;
        touch-action: pan-y;
    }

    .swipe-actions {
        position: absolute;
        right: -150px;
        top: 0;
        height: 100%;
        display: flex;
        transition: transform 0.3s ease;
    }

    .swipe-action {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 100%;
        color: white;
    }
</style>

<h3 class="text-center">Creación de Recordatorios</h3>


@foreach (var item in Items)
{
    <MudPaper Class="pa-4 my-4" Elevation="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">@item.Title</MudText>
                <MudText Typo="Typo.body2">@item.DateNotification</MudText>
                <MudText Typo="Typo.body2">
                    Estado: <strong>@(item.IsPaid ? "Pagado" : "Sin Pagar")</strong>
                </MudText>
                <MudText Typo="Typo.body2">
                    Valor: <strong>@item.Mount</strong>
                </MudText>
            </MudCardContent>
            @if (!item.IsPaid)
            {
                <MudCardActions>
     @*                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Info"
                                   OnClick="() => EditItem(item)" /> *@
                    <MudIconButton Icon="@Icons.Material.Filled.Cached"
                                   Color="Color.Default"
                                   OnClick="() => RescheduleNotification(item)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Done"
                                   Color="Color.Success"
                                   OnClick="() => MarAsPayed(item)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="() => DeleteItem(item)" />
                </MudCardActions>
            }
        </MudCard>
    </MudPaper>
}

@* 
<MudIconButton Icon="@Icons.Material.Filled.Add" 
Variant="Variant.Filled"
               OnClick="OpenDialogAsync"
               Size="Size.Large"
               Style=@($"position: fixed;right: 20px; bottom: 20px; z-index: 100%;border-radius:50%;background-color:#3dc4a4;color:white")></MudIconButton>

 *@

@code {

    private AppTheme? currentTheme;

    public AppTheme? CurrentTheme
    {
        get

        {

            if (Application.Current != null)
            {
                return Application.Current.RequestedTheme;
            }

            return null;
        }
        set { currentTheme = Application.Current != null ? Application.Current.RequestedTheme : null ; }
    }


    private NotificationData notificationData = new NotificationData();

    private List<NotificationData> notifications = new();
    private NotificationData selectedNotification = new();
    private List<SwipeItemNotification> Items = new List<SwipeItemNotification>();

    private bool _isDarkMode;

    public DateTime datePart { get; set; } = DateTime.Now.Date;
    public TimeSpan timePart { get; set; } = DateTime.Now.TimeOfDay;

    public string timePartString
    {
        get => timePart.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParse(value, out TimeSpan parsedTime))
            {
                timePart = parsedTime;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (currentTheme == AppTheme.Light)
        {
            _isDarkMode = false;
        }
        else
        {
            _isDarkMode = true;
        }

        WeakReferenceMessenger.Default.Register<OpenDialog>(this, (s,message) =>
        {
            if (message._OpenDialog)
            {
                OpenDialogAsync();
            }

        });


        notifications = await DatabaseService.GetNotificationsAsync(false);

        ReloadItems();

        StateService.OnChange += StateHasChangedData;

    }

    void ReloadItems()
    {
        Items.Clear();

        foreach (var not in notifications)
        {

            Items.Add(new SwipeItemNotification
                {
                    Id = not.Id,
                    Title = not.Name,
                    IsPaid = not.IsPaid,
                    DateNotification = not.DateTime.ToString("yyyy-MM-dd hh:mm tt"),
                    Mount = not.Amount
                });
        }
    }





    private void UpdateTimePart(ChangeEventArgs e)
    {
        timePartString = e.Value?.ToString() ?? "";
    }

    async Task<bool> MarAsPayed(SwipeItemNotification item)
    {
        selectedNotification = notifications.Where((x) => x.Id == item.Id).FirstOrDefault() ?? new NotificationData();

        if (Application.Current?.MainPage != null)
        {
            

        bool answer = await Application.Current.MainPage.DisplayAlert("Confirmación", "¿Estás seguro que deseas realizar esta acción?", "Sí", "No");

        if (answer == true)
        {
            selectedNotification.IsPaid = true;

            await DatabaseService.SaveNotificationAsync(selectedNotification, true);

            notifications = await DatabaseService.GetNotificationsAsync(false);

            int[] cancelIds = [selectedNotification.NotificationId];
            var resultCancel = LocalNotificationCenter.Current.Cancel(cancelIds);

            var pending = await LocalNotificationCenter.Current.GetPendingNotificationList();

            StateService.NotifyStateChanged();

            ReloadItems();

        }

        }


        return await Task.FromResult(true);
    }

    async Task<bool> RescheduleNotification(SwipeItemNotification item)
    {
        selectedNotification = notifications.Where((x) => x.Id == item.Id).FirstOrDefault() ?? new NotificationData();

        if (Application.Current?.MainPage != null)
        {

        bool answer = await Application.Current.MainPage.DisplayAlert("Confirmación", "¿Estás seguro que deseas realizar esta acción?", "Sí", "No");

        if (answer == true)
        {
            // Si el usuario confirma, programamos una nueva notificación para el próximo mes
            selectedNotification.IsPaid = false;
            selectedNotification.DateTime = selectedNotification.DateTime.AddDays(30);
            selectedNotification.Id = 0;

            int result = await DatabaseService.SaveNotificationAsync(selectedNotification, false);

            notifications = await DatabaseService.GetNotificationsAsync(false);

            StateService.NotifyStateChanged();


            ReloadItems();
        }

        }


        return await Task.FromResult(true);
    }

    private void EditItem(SwipeItemNotification item)
    {
        // Lógica para editar el item
        Console.WriteLine($"Editando item {item.Id}");
    }

    private async Task DeleteItem(SwipeItemNotification item)
    {
        var notification = new NotificationData()
            {
                Id = item.Id
            };

        await DatabaseService.DeleteNotificationAsync(notification);
        int[] cancelIds = [notification.NotificationId];
        LocalNotificationCenter.Current.Cancel(cancelIds);


        Items.Remove(item);
        StateHasChanged();
    }    

    private Task OpenDialogAsync()
    {

        WeakReferenceMessenger.Default.Send(new HideFloatButton(true));
        return DialogService.ShowAsync<DialogSetOptionsExample_Dialog>("Nuevo Recordatorio");
    }

    async Task StateHasChangedData()
    {
        await ReloadData();
        ReloadItems();
        StateHasChanged();
    }

    async Task ReloadData()
    {
        notifications = await DatabaseService.GetNotificationsAsync(false);
    }

    public void Dispose()
    {
        StateService.OnChange -= StateHasChangedData;
    }

    [JSInvokable]
    public static Task<string> MiFuncionBlazor(string param)
    {
        return Task.FromResult($"Resultado: {param}");
    }

}
