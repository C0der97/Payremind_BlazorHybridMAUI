@page "/"
@inject NotificationService NotificationService
@inject NotificationServiceBd NotificationServiceBd
@inject NotificationServiceMaui NotificationServiceMaui
@inject SQLiteDatabaseService DatabaseService
@inject IJSRuntime JSRuntime


@using Maui.NullableDateTimePicker
@using PayRemind.Shared
@using Plugin.LocalNotification
@using Microsoft.Extensions.DependencyInjection


<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Programar Notificación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@notificationData" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="form-label">Nombre</label>
                        <InputText id="name" class="form-control" @bind-Value="notificationData.Name" />
                        <ValidationMessage For="@(() => notificationData.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="amount" class="form-label">Monto</label>
                        <InputNumber id="amount" class="form-control" @bind-Value="notificationData.Amount" />
                        <ValidationMessage For="@(() => notificationData.Amount)" />
                    </div>

                    <div class="mb-3">
                        <label for="datePart" class="form-label">Fecha</label>
                        <InputDate id="datePart" class="form-control" @bind-Value="datePart" />
                        <ValidationMessage For="@(() => datePart)" />
                    </div>

                    <div class="mb-3">
                        <label for="timePart" class="form-label">Hora</label>
                        <input id="timePart" type="time" class="form-control" @oninput="UpdateTimePart" />
                        <ValidationMessage For="@(() => timePart)" />
                    </div>

                    <RadzenButton ButtonType="ButtonType.Submit" Class="custom-success-button rz-ripple" Text="Programar" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="rz-p-12">
    <RadzenButton Click="ShowModal"
                  ButtonStyle="ButtonStyle.Primary"
                  Icon="add"
                  class="rz-border-radius-circle rz-shadow-8"
                  Style="position: fixed; right: 2rem; bottom: 2rem; padding: 1rem;
                    border-radius: 50%">
    </RadzenButton>
</div>


@code {
    private NotificationData notificationData = new NotificationData();

    bool isBusyScheduleButton = false;

    public DateTime datePart { get; set; } = DateTime.Now.Date;
    public TimeSpan timePart { get; set; } = DateTime.Now.TimeOfDay;

    public string timePartString
    {
        get => timePart.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParse(value, out TimeSpan parsedTime))
            {
                timePart = parsedTime;
            }
        }
    }

    NullableDateTimePicker dateTimePicker = new NullableDateTimePicker();

    private static void OnNullableDateTimeChanged(object sender, DateTimeChangedEventArgs e)
    {
        Console.WriteLine("DateTime changed!");
        Console.WriteLine("Old DateTime: " + e.OldDateTime);
        Console.WriteLine("New DateTime: " + e.NewDateTime);
    }

    protected override async Task OnInitializedAsync()
    {
        if (await LocalNotificationCenter.Current.AreNotificationsEnabled() == false)
        {
            await LocalNotificationCenter.Current.RequestNotificationPermission();
        }
        dateTimePicker.NullableDateTimeChanged += OnNullableDateTimeChanged;
    }

    async Task OpenCalendar()
    {
        isBusyScheduleButton = true;
        StateHasChanged();

        INullableDateTimePickerOptions nullableDateTimePickerOptions = new NullableDateTimePickerOptions
            {
                NullableDateTime = DateTime.Now,
                Mode = PickerModes.DateTime,
                ShowWeekNumbers = true
            };

        var result = await NullableDateTimePicker.OpenCalendarAsync(nullableDateTimePickerOptions);

        if (result is PopupResult popupResult && popupResult.ButtonResult != PopupButtons.Cancel)
        {
            var MyDateTime = popupResult.NullableDateTime;
            datePart = MyDateTime?.Date ?? DateTime.Now.Date;
            timePart = MyDateTime?.TimeOfDay ?? DateTime.Now.TimeOfDay;
            Console.WriteLine("Fecha: " + MyDateTime.ToString());
        }

        isBusyScheduleButton = false;
        StateHasChanged();
    }

    async Task SubmitForm()
    {
        notificationData.DateTime = datePart.Add(timePart);
        Random rnd = new Random();

        var notification = new NotificationRequest
            {
                NotificationId = rnd.Next(),
                Title = "Recordatorio de pago: " + notificationData.Name,
                Description = $"Por Monto de: ${notificationData.Amount:F2}",
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = notificationData.DateTime
                },
                Group = "Reminders",
                CategoryType = NotificationCategoryType.Reminder
            };

        if (DeviceInfo.Current.Platform == DevicePlatform.Android)
        {
            await LocalNotificationCenter.Current.Show(notification);
        }

        await DatabaseService.SaveNotificationAsync(notificationData, false);

        NotificationServiceMaui.ShowNotification(notificationData.Name, $"Se ha programado un recordatorio de {notificationData.Name} para el {notificationData.DateTime:g}");
    }

    private async Task HandleValidSubmit()
    {
        await SubmitForm();
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('notificationModal')).hide()");

    }

    private async Task ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('notificationModal')).show()");
    }

    private void UpdateTimePart(ChangeEventArgs e)
    {
        timePartString = e.Value.ToString();
    }
}
